updateComponent => vm._update(vm._render())
vm._update => patch(vm.$el, vnode)
patch(oldNode, vnode)
1.oldNode.nodeType === 1 ? 根据vnode创建真实节点 插入到body中 (parentNode、oldNode.nextSibling)
2.oldNode.tag !== vnode.tag 先比较标签名 不一样？创建新节点 替换老节点replaceChild
3.标签名一样、vnode.el = oldNode.el复用dom  开始比较属性 patchProps(vnode) vnode.data存储了属性 setAttribute设置属性
  3.1 比较文本vndoe.tag == undefined
4.开始比较children
  4.1 一个有 一个没有
  4.2 双方都有children => patchChildren(el, oldChildren, newChildren)
    while(oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex)
      如果是补位元素null 老元素被移动了 指针继续往后、前移动
        if (!oldStartVnode)  oldStartVnode = oldChildren[++oldStartIndex]
        if (!oldEndVnode) oldEndVnode = oldChildren[--oldEndIndex]
      头和头指针比较
      isSameVnode(oldStartVnode, newStartVnode) => tag && key是否相同
        patch(oldStartVnode, newStartVnode)
        oldStartVnode = oldChildren[++oldStartIndex]
        newStartVnode = newChildren[++newStartIndex]
      尾和尾指针比较
      isSameVnode(oldEndVnode, newEndVnode)
        patch(oldEndVnode, newEndVnode)
        oldEndVnode = oldChildren[--oldEndIndex]
        newEndVnode = newChildren[--newEndIndex]
      头尾比较
      isSameVnode(oldStartVnode, newEndVnode)
        patch(oldStartVnode, newEndVnode)
        老的开头节点插入到尾节点下一个元素的前面
        el.insertBefore(oldStartVnode.el, oldEndVnode.el.nextSibling)
        oldStartVnode = oldChildren[++oldStartIndex]
        newEndVnode = newChildren[--newEndIndex]
      尾头比较
      isSameVnode(oldEndVnode, newStartVnode)
        patch(oldEndVnode, newStartVnode)
        老的尾节点插入到老的新节点的前面
        el.insertBefore(oldEndVnode.el, oldStartVnode.el)
        oldEndVnode = oldChildren[--oldEndIndex]
        newStartVnode = newChildren[++newStartIndex]
      乱序比对
        1.根据key和对应的索引 生成映射表
        2.用新的节点开头去映射表里查找 索引
          如果没有找到、不能复用、将当前元素插入到老的开始指针前面
          如果可以找到、通过key对应的index找到移动的元素 插入到老的开始指针的前面 然后比较patch(moveVnode, newStartVnode)
          移走的元素用null补位  oldChildren[moveIndex] = null
          newStartVnode = newChildren[++newStartIndex]
    追加新元素
    if (newStartIndex <= newEndIndex)
      for(let i = newStartIndex; i <= newEndIndex; i++)
        尾指针的额下一个节点是否有值
        if (newChildren[newEndIndex + 1] == null)
        el.insertBefore(createEle(newChildren[i]), 参照元素)
    删除新元素
    if (oldStartIndex <= oldEndIndex)
      如果老节点中为移动走了的元素才进行删除
      if (oldChildren[i] !== null)  el.removeChildren(oldChildren[i].el)



 
Object.defineProperty + dirty

initComputed(vm, computed)
  const watchers = vm._computedWatchers = {}

  for(let key in computed)
    const userDef = computed[key]

    用户定义的函数  计算属性的值可以为函数、对象{get, set}
    let getter = typeof userDef === 'function' ? userDef : userDef.get

    每个计算属性key 对应一个watcher  lazy:true watcher默认不取值 getter方法
    watchers[key] = new Watcher(vm, getter, () => {}, { lazy: true })

    将key定义在vm上 sharedProperty有get、set方法 
    Object.defineProperty(vm, key, sharedProperty)


sharedProperty.get = createComputedGetter(key)

createComputedGetter(key)
  return function computedGetter() {
    let watcher = this._computedWatchers[key]
    if (watcher.dirty) {
      watcher.evaluate()
    }

    收集渲染watcher 用来更新视图
    if (Dep.target) {
      watcher.depend()
    }
    return watcher.value
  }


============================Watcher====================================
function evaluate() {
  this.dirty = false  取过值了
  this.value = this.get()   watcher取值设置value属性
}

function update() {
  if (this.lazy) {
    this.dirty = true
  } else {
    缓存watcher 去重 异步更新
    queueWarcher(this)
  }
}

function depend() {
  let i = this.deps.length
  while(i--) {
    this.deps[i].depend()
  }
}
